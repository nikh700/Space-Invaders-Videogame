


ARM Macro Assembler    Page 1 


    1 00000000         ; StringConversion.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on TM4C123
    5 00000000         ; ECE319K lab 7 number to string conversions
    6 00000000         ;
    7 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
    8 00000000         
    9 00000000         
   10 00000000                 EXPORT           Dec2String
   11 00000000                 EXPORT           Fix2String
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 PRESERVE8
   15 00000000         
   16 00000000         
   17 00000000         ;-----------------------Dec2String----------------------
                       -
   18 00000000         ; Convert a 32-bit number into unsigned decimal format
   19 00000000         ; String the string into the empty array add null-termin
                       ation
   20 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   21 00000000         ;        R1 pointer to empty array
   22 00000000         ; Output: none
   23 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   24 00000000         Dec2String
   25 00000000         
   26 00000000 E92D 4BF0       PUSH             {R4-R9, R11, LR}
   27 00000004         
   28 00000004 2800            CMP              R0, #0
   29 00000006 D03F            BEQ              Special_Case
   30 00000008         
   31 00000008 00000000 
                       x       EQU              0
   32 00000008 00000004 
                       y       EQU              4
   33 00000008 00000008 
                       z       EQU              8
   34 00000008 0000000C 
                       i       EQU              12
   35 00000008        B 
                       FP      RN               11
   36 00000008         
   37 00000008         ;Initializing SP and FP
   38 00000008 B084            SUB              SP, #16
   39 0000000A 46EB            MOV              FP, SP
   40 0000000C         
   41 0000000C         ;Initializing x
   42 0000000C 4602            MOV              R2, R0
   43 0000000E F8CB 2000       STR              R2, [FP, #x]
   44 00000012         
   45 00000012         ;Initializing y
   46 00000012 F04F 020A       MOV              R2, #10
   47 00000016 F88B 2004       STRB             R2, [FP, #y]



ARM Macro Assembler    Page 2 


   48 0000001A         
   49 0000001A         ;Initializing c and i
   50 0000001A F04F 0200       MOV              R2, #0
   51 0000001E F88B 2008       STRB             R2, [FP, #z]
   52 00000022 F88B 200C       STRB             R2, [FP, #i]
   53 00000026         
   54 00000026         ;Pushing null at end of string
   55 00000026 F04F 0200       MOV              R2, #0x00
   56 0000002A B504            PUSH             {R2, LR}
   57 0000002C         
   58 0000002C         ;Loop to get decimal string
   59 0000002C         Loop
   60 0000002C F8DB 2000       LDR              R2, [FP, #x] ; R2 has x
   61 00000030 2A00            CMP              R2, #0
   62 00000032 D013            BEQ              Store_String
   63 00000034 F89B 3004       LDRB             R3, [FP, #y] ; R3 has y
   64 00000038         
   65 00000038         ; R2 = (x % y) + 0x30
   66 00000038 FBB2 F4F3       UDIV             R4, R2, R3
   67 0000003C FB04 F403       MUL              R4, R3
   68 00000040 EBA2 0204       SUB              R2, R2, R4
   69 00000044 F102 0230       ADD              R2, #0x30
   70 00000048         
   71 00000048 F88B 2008       STRB             R2, [FP, #z] ; z = x % y
   72 0000004C B504            PUSH             {R2, LR}    ; z is on the stack
                                                            
   73 0000004E         
   74 0000004E         ; x = x / y
   75 0000004E F8DB 2000       LDR              R2, [FP, #x]
   76 00000052 FBB2 F2F3       UDIV             R2, R3
   77 00000056 F8CB 2000       STR              R2, [FP, #x]
   78 0000005A         
   79 0000005A E7E7            B                Loop
   80 0000005C         
   81 0000005C         Store_String
   82 0000005C F89B 2008       LDRB             R2, [FP, #z]
   83 00000060 2A00            CMP              R2, #0
   84 00000062 D00D            BEQ              End_String
   85 00000064         
   86 00000064 E8BD 4008       POP              {R3, LR}
   87 00000068 F88B 3008       STRB             R3, [FP, #z]
   88 0000006C         
   89 0000006C F89B 400C       LDRB             R4, [FP, #i]
   90 00000070 EB01 0504       ADD              R5, R1, R4
   91 00000074 702B            STRB             R3, [R5]
   92 00000076         
   93 00000076 F104 0401       ADD              R4, #1
   94 0000007A F88B 400C       STRB             R4, [FP, #i]
   95 0000007E         
   96 0000007E E7ED            B                Store_String
   97 00000080         
   98 00000080         End_String
   99 00000080 B004            ADD              SP, #16
  100 00000082 E8BD 4BF0       POP              {R4-R9, R11, LR}
  101 00000086         
  102 00000086 4770            BX               LR
  103 00000088         
  104 00000088         Special_Case
  105 00000088 F04F 0230       MOV              R2, #0x30



ARM Macro Assembler    Page 3 


  106 0000008C 700A            STRB             R2, [R1]
  107 0000008E F04F 0200       MOV              R2, #0x00
  108 00000092 704A            STRB             R2, [R1, #1]
  109 00000094         
  110 00000094 E8BD 4BF0       POP              {R4-R9, R11, LR}
  111 00000098         
  112 00000098 4770            BX               LR
  113 0000009A         
  114 0000009A         
  115 0000009A         
  116 0000009A         
  117 0000009A         
  118 0000009A         
  119 0000009A         
  120 0000009A         
  121 0000009A         
  122 0000009A         ;* * * * * * * * End of Dec2String * * * * * * * *
  123 0000009A         
  124 0000009A         
  125 0000009A         ; -----------------------Fix2String---------------------
                       -
  126 0000009A         ; Create characters for LCD display in fixed-point forma
                       t
  127 0000009A         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
  128 0000009A         ; Inputs:  R0 is an unsigned 32-bit number
  129 0000009A         ;          R1 pointer to empty array
  130 0000009A         ; Outputs: none
  131 0000009A         ; E.g., R0=0,    then create "0.000 "
  132 0000009A         ;       R0=3,    then create "0.003"
  133 0000009A         ;       R0=89,   then create "0.089"
  134 0000009A         ;       R0=123,  then create "0.123"
  135 0000009A         ;       R0=9999, then create "9.999"
  136 0000009A         ;       R0>9999, then create "*.***"
  137 0000009A         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  138 0000009A         Fix2String
  139 0000009A E92D 4DF0       PUSH             {R4, R5, R6, R7, R8, R10, R11, 
LR}
  140 0000009E         
  141 0000009E 00000000 
                       Counter EQU              0
  142 0000009E        7 
                       FP2     RN               R7
  143 0000009E         
  144 0000009E         ;Initializing SP and FP
  145 0000009E B081            SUB              SP, #4
  146 000000A0 466F            MOV              FP2, SP
  147 000000A2         
  148 000000A2 F242 720F       LDR              R2, =9999
  149 000000A6 4290            CMP              R0, R2
  150 000000A8 D835            BHI              Max         ; If number is grea
                                                            ter than 9999, bran
                                                            ch to "*.***"
  151 000000AA         
  152 000000AA         ; First digit in array
  153 000000AA F44F 737A       LDR              R3, =1000
  154 000000AE FBB0 F2F3       UDIV             R2, R0, R3  ; R2 = 9999 / 1000 
                                                            = 9



ARM Macro Assembler    Page 4 


  155 000000B2 F102 0430       ADD              R4, R2, #0x30 ; R4 = 0x39
  156 000000B6 700C            STRB             R4, [R1]    ; Array gets 9
  157 000000B8 F101 0101       ADD              R1, #1      ; Array Pointer inc
                                                            remented
  158 000000BC         
  159 000000BC         ; . in array
  160 000000BC F04F 052E       LDR              R5, =0x2E   ; R5 = .
  161 000000C0 700D            STRB             R5, [R1]    ; Array gets .
  162 000000C2 F101 0101       ADD              R1, #1      ; Array Pointer inc
                                                            remented
  163 000000C6         
  164 000000C6         ; Loop for next three digits
  165 000000C6 F04F 0800       MOV              R8, #0
  166 000000CA F8C7 8000       STR              R8, [FP2, #Counter]
  167 000000CE F04F 0600       MOV              R6, #0
  168 000000D2 F04F 0A0A       MOV              R10, #10    ; R10 = 10
  169 000000D6         
  170 000000D6         Loop_5
  171 000000D6 FB03 F502       MUL              R5, R3, R2  ; R5 = 1000 * 9 = 9
                                                            000
  172 000000DA 442E            ADD              R6, R5      ; R6 = 9000 + next 
                                                            digits
  173 000000DC EBA0 0206       SUB              R2, R0, R6  ; R7 = 9999 - 9000 
                                                            = 999
  174 000000E0 FBB3 F3FA       UDIV             R3, R10     ; R3 = 100
  175 000000E4 FBB2 F2F3       UDIV             R2, R3      ; R2 = 999 / 100 = 
                                                            9
  176 000000E8 F102 0430       ADD              R4, R2, #0x30 ; R4 = ASCII for 
                                                            number
  177 000000EC 700C            STRB             R4, [R1]    ; Store digit in th
                                                            e array
  178 000000EE F101 0101       ADD              R1, #1      ; Increment Array P
                                                            ointer
  179 000000F2 F8D7 8000       LDR              R8, [FP2, #Counter]
  180 000000F6 F108 0801       ADD              R8, #1
  181 000000FA F8C7 8000       STR              R8, [FP2, #Counter]
  182 000000FE F1B8 0F03       CMP              R8, #3
  183 00000102         ;ADD R8, #1 ; Increment loop counter
  184 00000102         ;CMP R8, #3 ; Comparing loop counter to how many times i
                       t has to run
  185 00000102 D000            BEQ              Space_Character ; If loop count
                                                            er is equal to 3, e
                                                            nd subroutine
  186 00000104 E7E7            B                Loop_5      ; Otherwise, move o
                                                            n to next digit and
                                                             run loop again
  187 00000106         
  188 00000106         Space_Character
  189 00000106 F04F 0520       LDR              R5, =0x20
  190 0000010A 700D            STRB             R5, [R1]
  191 0000010C F101 0101       ADD              R1, #1
  192 00000110 F002 0202       AND              R2, R2, #2
  193 00000114 E014            B                Done
  194 00000116         
  195 00000116         Max
  196 00000116 F04F 022A       LDR              R2, =0x2A   ; R2 = *
  197 0000011A 700A            STRB             R2, [R1]
  198 0000011C F101 0101       ADD              R1, #1
  199 00000120 F04F 022E       LDR              R2, =0x2E   ; R2 = .



ARM Macro Assembler    Page 5 


  200 00000124 700A            STRB             R2, [R1]
  201 00000126 F101 0101       ADD              R1, #1
  202 0000012A F04F 0300       MOV              R3, #0
  203 0000012E         Loop_4                               ; Loop to write 3 m
                                                            ore *'s
  204 0000012E F04F 022A       LDR              R2, =0x2A
  205 00000132 700A            STRB             R2, [R1]
  206 00000134 F101 0101       ADD              R1, #1
  207 00000138 F103 0301       ADD              R3, #1
  208 0000013C 2B03            CMP              R3, #3
  209 0000013E D1F6            BNE              Loop_4
  210 00000140         
  211 00000140         Done
  212 00000140         ; Null in array
  213 00000140 F04F 0500       LDR              R5, =0x00   ; R5 = Null
  214 00000144 700D            STRB             R5, [R1]    ; Array gets Null
  215 00000146 F101 0101       ADD              R1, #1      ; Array Pointer inc
                                                            remented
  216 0000014A B001            ADD              SP, #4
  217 0000014C E8BD 4DF0       POP              {R4, R5, R6, R7, R8, R10, R11, 
LR}
  218 00000150 4770            BX               LR
  219 00000152         
  220 00000152         
  221 00000152         
  222 00000152         
  223 00000152         
  224 00000152         
  225 00000152 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  226 00000154                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\stringconversion.d -o.\stringconversion.o -I.\RTE\_SpaceInvaders
 -IC:\Users\nikhi\AppData\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -I
C:\Users\nikhi\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C1
23 --predefine="__UVISION_VERSION SETA 541" --predefine="TM4C123GH6PM SETA 1" -
-predefine="_RTE_ SETA 1" --list=.\stringconversion.lst ..\inc\StringConversion
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file ..\inc\StringConversion.s
   Uses
      None
Comment: .text unused
Dec2String 00000000

Symbol: Dec2String
   Definitions
      At line 24 in file ..\inc\StringConversion.s
   Uses
      At line 10 in file ..\inc\StringConversion.s
Comment: Dec2String used once
Done 00000140

Symbol: Done
   Definitions
      At line 211 in file ..\inc\StringConversion.s
   Uses
      At line 193 in file ..\inc\StringConversion.s
Comment: Done used once
End_String 00000080

Symbol: End_String
   Definitions
      At line 98 in file ..\inc\StringConversion.s
   Uses
      At line 84 in file ..\inc\StringConversion.s
Comment: End_String used once
Fix2String 0000009A

Symbol: Fix2String
   Definitions
      At line 138 in file ..\inc\StringConversion.s
   Uses
      At line 11 in file ..\inc\StringConversion.s
Comment: Fix2String used once
Loop 0000002C

Symbol: Loop
   Definitions
      At line 59 in file ..\inc\StringConversion.s
   Uses
      At line 79 in file ..\inc\StringConversion.s
Comment: Loop used once
Loop_4 0000012E

Symbol: Loop_4
   Definitions
      At line 203 in file ..\inc\StringConversion.s
   Uses
      At line 209 in file ..\inc\StringConversion.s
Comment: Loop_4 used once
Loop_5 000000D6

Symbol: Loop_5



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 170 in file ..\inc\StringConversion.s
   Uses
      At line 186 in file ..\inc\StringConversion.s
Comment: Loop_5 used once
Max 00000116

Symbol: Max
   Definitions
      At line 195 in file ..\inc\StringConversion.s
   Uses
      At line 150 in file ..\inc\StringConversion.s
Comment: Max used once
Space_Character 00000106

Symbol: Space_Character
   Definitions
      At line 188 in file ..\inc\StringConversion.s
   Uses
      At line 185 in file ..\inc\StringConversion.s
Comment: Space_Character used once
Special_Case 00000088

Symbol: Special_Case
   Definitions
      At line 104 in file ..\inc\StringConversion.s
   Uses
      At line 29 in file ..\inc\StringConversion.s
Comment: Special_Case used once
Store_String 0000005C

Symbol: Store_String
   Definitions
      At line 81 in file ..\inc\StringConversion.s
   Uses
      At line 62 in file ..\inc\StringConversion.s
      At line 96 in file ..\inc\StringConversion.s

12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Counter 00000000

Symbol: Counter
   Definitions
      At line 141 in file ..\inc\StringConversion.s
   Uses
      At line 166 in file ..\inc\StringConversion.s
      At line 179 in file ..\inc\StringConversion.s
      At line 181 in file ..\inc\StringConversion.s

i 0000000C

Symbol: i
   Definitions
      At line 34 in file ..\inc\StringConversion.s
   Uses
      At line 52 in file ..\inc\StringConversion.s
      At line 89 in file ..\inc\StringConversion.s
      At line 94 in file ..\inc\StringConversion.s

x 00000000

Symbol: x
   Definitions
      At line 31 in file ..\inc\StringConversion.s
   Uses
      At line 43 in file ..\inc\StringConversion.s
      At line 60 in file ..\inc\StringConversion.s
      At line 75 in file ..\inc\StringConversion.s
      At line 77 in file ..\inc\StringConversion.s

y 00000004

Symbol: y
   Definitions
      At line 32 in file ..\inc\StringConversion.s
   Uses
      At line 47 in file ..\inc\StringConversion.s
      At line 63 in file ..\inc\StringConversion.s

z 00000008

Symbol: z
   Definitions
      At line 33 in file ..\inc\StringConversion.s
   Uses
      At line 51 in file ..\inc\StringConversion.s
      At line 71 in file ..\inc\StringConversion.s
      At line 82 in file ..\inc\StringConversion.s
      At line 87 in file ..\inc\StringConversion.s

5 symbols
351 symbols in table
